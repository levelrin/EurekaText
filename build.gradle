plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.4.4'
    id 'pmd'
    id 'checkstyle'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
}

group 'com.levelrin'
version '0.1.0'

sourceCompatibility = 1.12

mainClassName = 'com.levelrin.eurekatext.Main'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
    testCompile 'org.hamcrest:hamcrest:2.2'
    testCompile 'org.testfx:testfx-core:4.0.16-alpha'
    testCompile 'org.testfx:testfx-junit5:4.0.16-alpha'
    testCompile 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
    compile 'net.jcip:jcip-annotations:1.0'
    compile 'com.github.spotbugs:spotbugs-annotations:4.0.6'
}

test {
    useJUnitPlatform()
    dependsOn 'cleanTest'
    testLogging {
        events 'skipped', 'failed'
        exceptionFormat = 'full'
    }
    systemProperty 'java.awt.headless', true
    systemProperty 'testfx.robot', 'glass'
    systemProperty 'testfx.headless', true
    systemProperty 'prism.order', 'sw'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                enabled = true
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.88888
            }
            limit {
                enabled = true
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
            limit {
                enabled = true
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = 0.66666
            }
            limit {
                enabled = true
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.77777
            }
            limit {
                enabled = true
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.66666
            }
            limit {
                enabled = true
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 0.90000
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn jacocoTestReport

spotbugs {
    toolVersion = '4.0.6'
    ignoreFailures = false
    effort = 'max'
}
spotbugsMain {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}
spotbugsTest {
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

pmd {
    toolVersion = '6.21.0'
    ignoreFailures = false
    ruleSetFiles = files('config/pmd/ruleSet.xml')
    ruleSets = []
}
tasks.withType(Pmd) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

checkstyle {
    toolVersion '8.34'
    ignoreFailures = false
    configFile = file('config/checkstyle/checkstyle.xml')
    configProperties = [
        'checkstyle.header.file': file('config/checkstyle/java.header'),
        'checkstyle.suppression.file': file('config/checkstyle/suppression.xml')
    ]
}
tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

javafx {
    version = "14"
    modules = [ 'javafx.controls' ]
}
